/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.JD.Machine.StartStop;

import com.JD.Test.*;
import com.JD.Master.Forms.*;
import java.awt.Color;
import java.lang.InstantiationException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.*;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author Yogesh
 */
public class StartStop_Form extends javax.swing.JFrame {

    boolean flag = false;
    boolean flag1 = false;
    SimpleDateFormat formatter;
    //---------------Load Data------------//
    String machineNumber = "";
    String machineName = "";
    Date startDate = null;
    Date stopDate = null;
    Date StartTime = null;
    Date stopTime = null;
    String totalTime = "";
    int startReading = 0;
    int stopReading = 0;
    int totalReading = 0;
    double lastFuel = 0.0;
    double presentFuel = 0.0;
    double consumeFuel = 0.0;
    double average = 0.0;
    String operatorName = "";
    String remark = "";
    Date dateOfAddition = null;
    Date timeOfAddition = null;
    String location = "";
    String addedByPersonName = "";
    String addedWithRight = "";
    String rawField1 = "";
    String rawField2 = "";
    String rawField3 = "";
    String rawField4 = "";
    String rawField5 = "";
    String rawField6 = "";
    //---------------Load Data-----------------------//
    //--------------Load Session Factory-------------//
    SessionFactory init_SessionFactory = com.JD.StaticData.Static_DATA.init_SessionFactory;
    //--------------Load Session Factory-------------//    
    //--------------Load Table Model-----------------//
    javax.swing.table.DefaultTableModel status_Table_Model;
    javax.swing.table.DefaultTableModel detailList_Table_Model;
    int index_status_Table = -1;
    int index_detailList_Table = -1;
    //--------------Load Table Model-----------------//   

    /**
     * Creates new form Party_MasterForm
     */
    public StartStop_Form() {
        initComponents();
        com.JD.StaticData.Static_DATA.number_ComboBox = number_ComboBox;
        com.JD.StaticData.Static_DATA.operatorName_ComboBox = operatorName_ComboBox;
        status_Table_Model = (DefaultTableModel) status_Table.getModel();
        detailList_Table_Model = (DefaultTableModel) detailList_Table.getModel();
        reset_Status_Table();
        reset_detailList_Table();
        flag1 = false;
        updateComboBox();
        start_Button.setEnabled(false);
        stop_Button.setEnabled(false);
        operatorName_ComboBox.setEnabled(false);
        reading_TextField.setEnabled(false);
        remark_TextField.setEnabled(false);
        reading_TextField.setBackground(Color.lightGray);
        remark_TextField.setBackground(Color.lightGray);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartStop_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailList_Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        number_ComboBox = new javax.swing.JComboBox();
        name_Lable = new javax.swing.JLabel();
        load_Button = new javax.swing.JButton();
        stopMachine_Panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        operatorName_ComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        reading_TextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        remark_TextField = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        status_Table = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        start_Button = new javax.swing.JButton();
        stop_Button = new javax.swing.JButton();
        reset_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartStop_Panel.setBackground(new java.awt.Color(255, 255, 51));

        detailList_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Machine No", "Machine Name", "Operator Name", "Start Date", "Start Time", "Stop Date", "Stop Time", "Total Time", "Start Reading", "Stop Reading", "Total Reading", "Last Fuel", "Present Fuel", "Consume Fuel", "Average"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(detailList_Table);

        jLabel1.setText("* Machine Number:");

        number_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Machine Number" }));
        number_ComboBox.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                number_ComboBoxComponentAdded(evt);
            }
        });
        number_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                number_ComboBoxActionPerformed(evt);
            }
        });

        name_Lable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/JD/Home/Hide.jpg"))); // NOI18N
        name_Lable.setText(" Select Machine Number ");
        name_Lable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        load_Button.setText("Load Data");

        stopMachine_Panel.setBackground(new java.awt.Color(255, 255, 51));
        stopMachine_Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true));

        jLabel2.setText("Stop Machine:");

        jLabel4.setText("* Operator Name:");

        operatorName_ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Operator Name" }));

        jLabel5.setText("* Current Reading:");

        jLabel6.setText("   Remark:");

        remark_TextField.setColumns(20);
        remark_TextField.setLineWrap(true);
        remark_TextField.setRows(5);
        jScrollPane2.setViewportView(remark_TextField);

        javax.swing.GroupLayout stopMachine_PanelLayout = new javax.swing.GroupLayout(stopMachine_Panel);
        stopMachine_Panel.setLayout(stopMachine_PanelLayout);
        stopMachine_PanelLayout.setHorizontalGroup(
            stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stopMachine_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(stopMachine_PanelLayout.createSequentialGroup()
                        .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(operatorName_ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(reading_TextField)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        stopMachine_PanelLayout.setVerticalGroup(
            stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stopMachine_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(operatorName_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(reading_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(stopMachine_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        status_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Machine Number", "Machine Name", "Start Date", "Start Time", "Current Reading", "Fuel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(status_Table);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/JD/Home/down.jpg"))); // NOI18N
        jLabel3.setText(" List Of Machine Already Started/Running");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        jButton2.setText("Export To Excel");

        jButton3.setText("Print");

        start_Button.setText("Start Machine ");
        start_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_ButtonActionPerformed(evt);
            }
        });

        stop_Button.setText("Stop Machine");
        stop_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stop_ButtonActionPerformed(evt);
            }
        });

        reset_Button.setText("Reset");
        reset_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout StartStop_PanelLayout = new javax.swing.GroupLayout(StartStop_Panel);
        StartStop_Panel.setLayout(StartStop_PanelLayout);
        StartStop_PanelLayout.setHorizontalGroup(
            StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1263, Short.MAX_VALUE)
            .addGroup(StartStop_PanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(StartStop_PanelLayout.createSequentialGroup()
                        .addComponent(number_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name_Lable, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(stopMachine_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StartStop_PanelLayout.createSequentialGroup()
                        .addComponent(load_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop_Button)))
                .addGap(18, 18, 18)
                .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(StartStop_PanelLayout.createSequentialGroup()
                        .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(StartStop_PanelLayout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        StartStop_PanelLayout.setVerticalGroup(
            StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StartStop_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(number_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name_Lable)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(stopMachine_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StartStop_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_Button)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(start_Button)
                    .addComponent(stop_Button)
                    .addComponent(reset_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(StartStop_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(StartStop_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void updateComboBox() {
        flag1 = false;
        Session session = init_SessionFactory.openSession();
        Criteria cr = session.createCriteria(com.JD.Master.Hibernate.config.Machinemaster.class);
        cr.add(Restrictions.eq("machinePartyLink", com.JD.StaticData.Static_DATA.selfPartyname));
        for (Object object : cr.list()) {
            com.JD.Master.Hibernate.config.Machinemaster m = (com.JD.Master.Hibernate.config.Machinemaster) object;
            number_ComboBox.addItem(m.getMachineNumber());
        }
        cr = session.createCriteria(com.JD.Master.Hibernate.config.Drivermaster.class);
        cr.add(Restrictions.eq("driverPartyLink", com.JD.StaticData.Static_DATA.selfPartyname));
        for (Object object : cr.list()) {
            com.JD.Master.Hibernate.config.Drivermaster d = (com.JD.Master.Hibernate.config.Drivermaster) object;
            operatorName_ComboBox.addItem(d.getDriverName());
        }
        session.close();
        flag1 = true;
        name_Lable.setText(" Select Machine Number ");
    }

    private void number_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_number_ComboBoxActionPerformed
        // TODO add your handling code here:          

        if (flag1) {
            String vehicleNumberTemp = number_ComboBox.getSelectedItem().toString();
            Session session = init_SessionFactory.openSession();
            Criteria cr = session.createCriteria(com.JD.Master.Hibernate.config.Machinemaster.class);
            cr.add(Restrictions.eq("machineNumber", vehicleNumberTemp));
            List results = cr.list();
            for (Object object : results) {
                com.JD.Master.Hibernate.config.Machinemaster m = (com.JD.Master.Hibernate.config.Machinemaster) object;
                name_Lable.setText("  " + m.getMachineName() + "  ");
                if (m.getMachineStatus().equals("ON")) {
                    operation(true);
                    stop_Button.setEnabled(true);
                    start_Button.setEnabled(false);
                } else {
                    operation(false);
                    start_Button.setEnabled(true);
                    stop_Button.setEnabled(false);
                }
            }
            session.close();
        }
    }//GEN-LAST:event_number_ComboBoxActionPerformed

    void operation(boolean flag) {
        if (flag) {
            operatorName_ComboBox.setEnabled(true);
            reading_TextField.setEnabled(true);
            remark_TextField.setEnabled(true);
            reading_TextField.setBackground(Color.white);
            remark_TextField.setBackground(Color.white);

        } else {
            operatorName_ComboBox.setEnabled(false);
            reading_TextField.setEnabled(false);
            remark_TextField.setEnabled(false);
            reading_TextField.setBackground(Color.lightGray);
            remark_TextField.setBackground(Color.lightGray);

        }
    }

    private void reset_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_ButtonActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_reset_ButtonActionPerformed

    private void number_ComboBoxComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_number_ComboBoxComponentAdded
        // TODO add your handling code here:
        flag1 = false;
    }//GEN-LAST:event_number_ComboBoxComponentAdded

    private void start_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_ButtonActionPerformed
        // TODO add your handling code here:
        try {
            String machineNumber = number_ComboBox.getSelectedItem().toString();
            Session session = init_SessionFactory.openSession();
            Criteria cr = session.createCriteria(com.JD.Master.Hibernate.config.Machinemaster.class);
            cr.add(Restrictions.eq("machineNumber", machineNumber));
            List results = cr.list();
            for (Object object : results) {
                com.JD.Master.Hibernate.config.Machinemaster m = (com.JD.Master.Hibernate.config.Machinemaster) object;
                if (m.getMachineFuel() <= 0.0) {
                    JOptionPane.showMessageDialog(null, "Cant Start As No Fuel In Machine Is 0.0 LTR");
                } else {
                    Transaction transaction = session.beginTransaction();
                    m.setMachineStatus("ON");
                    m.setMachineStartDate(new Date());
                    m.setMachineStartTime(new Date());
                    session.save(m);
                    transaction.commit();
                    JOptionPane.showMessageDialog(null, "Machine Number " + machineNumber + " Started Successfully.");
                    reset();
                    reset_Status_Table();
                }
            }
            session.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Something Went Wrong..");
        }

    }//GEN-LAST:event_start_ButtonActionPerformed

    private void stop_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stop_ButtonActionPerformed
        // TODO add your handling code here:
        machineNumber = number_ComboBox.getSelectedItem().toString();
        operatorName = operatorName_ComboBox.getSelectedItem().toString();
        String currentReadingTemp = reading_TextField.getText();
        remark = remark_TextField.getText();
        if (remark.equals("")) {
            remark = "NO Remark";
        }

        if (number_ComboBox.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Please Provide Machine Number");
        } else {
            if (operatorName_ComboBox.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please Provide Operator Name");
            } else {
                if (currentReadingTemp.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please Provide Current Reading");
                } else {
                    step1();
                }
            }
        }


    }//GEN-LAST:event_stop_ButtonActionPerformed

    void step1() {

        Session session = init_SessionFactory.openSession();
        Criteria cr = session.createCriteria(com.JD.Master.Hibernate.config.Machinemaster.class);
        cr.add(Restrictions.eq("machineNumber", machineNumber));
        List results = cr.list();
        for (Object object : results) {
            com.JD.Master.Hibernate.config.Machinemaster m = (com.JD.Master.Hibernate.config.Machinemaster) object;
            startReading = m.getMachineCurrentReading();
            stopReading = Integer.parseInt(reading_TextField.getText());
           
            if (startReading < stopReading) {
                Transaction transaction = session.beginTransaction();
                totalReading = stopReading - startReading;
                lastFuel = m.getMachineFuel();
                average = m.getMachineExpectedAvg();
                consumeFuel = (totalReading / average);
                if (consumeFuel > m.getMachineFuel()) {
                    JOptionPane.showMessageDialog(null, "Fraud IN Fuel,Cant Stop Machine,Firing SMS TO OWNER");
                } else {
                    presentFuel = m.getMachineFuel() - consumeFuel;
                    m.setMachineFuel(presentFuel);
                    m.setMachineCurrentReading(startReading + totalReading);
                    m.setMachineStatus("OFF");
                    startDate = m.getMachineStartDate();
                    StartTime = m.getMachineStartTime();
                    JOptionPane.showMessageDialog(null, consumeFuel);
                    session.save(m);
                    transaction.commit();
                    step2();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Reading Entered Is Not Valid");
            }
        }
        session.close();
    }

    void step2() {
        reset();
        reset_Status_Table();
    }

    void reset() {
        start_Button.setEnabled(false);
        stop_Button.setEnabled(false);
        name_Lable.setText(" Select Machine Number ");
        number_ComboBox.setSelectedItem("Select Machine Number");
        operatorName_ComboBox.setSelectedIndex(0);
        reading_TextField.setText("");
        remark_TextField.setText("");
        operatorName_ComboBox.setEnabled(false);
        reading_TextField.setEnabled(false);
        remark_TextField.setEnabled(false);
        reading_TextField.setBackground(Color.lightGray);
        remark_TextField.setBackground(Color.lightGray);
    }

    void reset_Status_Table() {
        flag = false;
        for (int i = status_Table_Model.getRowCount() - 1; i >= 0; i--) {
            status_Table_Model.removeRow(i);
        }
        index_status_Table = -1;
        Session session = init_SessionFactory.openSession();
        Criteria cr = session.createCriteria(com.JD.Master.Hibernate.config.Machinemaster.class);
        cr.add(Restrictions.eq("machinePartyLink", com.JD.StaticData.Static_DATA.selfPartyname));
        cr.add(Restrictions.eq("machineStatus", "ON"));
        List results = cr.list();
        for (Object object : results) {
            com.JD.Master.Hibernate.config.Machinemaster m = (com.JD.Master.Hibernate.config.Machinemaster) object;
            index_status_Table = index_status_Table + 1;
            status_Table_Model.insertRow(index_status_Table, new Object[]{m.getMachineNumber(), m.getMachineName(), m.getMachineStartDate(), m.getMachineStartTime(),m.getMachineCurrentReading(),m.getMachineFuel()});
        }
        session.close();
        flag = true;
    }

    void reset_detailList_Table() {
        for (int i = detailList_Table_Model.getRowCount() - 1; i >= 0; i--) {
            detailList_Table_Model.removeRow(i);
        }
        index_detailList_Table = -1;
        Session session = init_SessionFactory.openSession();
        Query q = session.createQuery("from com.JD.Machine.StartStop.Hibernate.config.Machinestartstop");
        for (Object object : q.list()) {
            com.JD.Machine.StartStop.Hibernate.config.Machinestartstop m = (com.JD.Machine.StartStop.Hibernate.config.Machinestartstop) object;
            detailList_Table_Model.insertRow(index_detailList_Table, new Object[]{m.getMachineNumber(), m.getMachineName(), m.getOperatorName(), m.getStartDate(), m.getStartTime(), m.getStopDate(), m.getStopTime(), m.getTotalTime(), m.getStartReading(), m.getStopReading(), m.getTotalReading(), m.getLastFuel(), m.getPresentFuel(), m.getConsumeFuel(), m.getAverage()});
        }
        session.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartStop_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartStop_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartStop_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartStop_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new StartStop_Form().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel StartStop_Panel;
    private javax.swing.JTable detailList_Table;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton load_Button;
    private javax.swing.JLabel name_Lable;
    private javax.swing.JComboBox number_ComboBox;
    private javax.swing.JComboBox operatorName_ComboBox;
    private javax.swing.JTextField reading_TextField;
    private javax.swing.JTextArea remark_TextField;
    private javax.swing.JButton reset_Button;
    private javax.swing.JButton start_Button;
    private javax.swing.JTable status_Table;
    private javax.swing.JPanel stopMachine_Panel;
    private javax.swing.JButton stop_Button;
    // End of variables declaration//GEN-END:variables
}
